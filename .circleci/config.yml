version: 2.1

docker-build: &docker-build
  steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Build Docker image
        command: |
          cd $REPO_SUBDIR
          docker build -t $IMAGE_NAME:latest .
    - run:
        name: Archive Docker image
        command: docker save -o image.tar $IMAGE_NAME
    - persist_to_workspace:
        root: .
        paths:
          - ./image.tar

docker-publish: &docker-publish
  steps:
    - attach_workspace:
        at: /tmp/workspace
    - setup_remote_docker
    - run:
        name: Load archived Docker image
        command: docker load -i /tmp/workspace/image.tar
    - run:
        name: Publish Docker Image to Docker Hub
        command: |
          echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          IMAGE_TAG="0.0.${CIRCLE_SHA1}"
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG

branch-filters: &branch-filters
  filters:
    branches:
      only:
        - master
        - staging

executors:
  backend:
    environment:
      IMAGE_NAME: pennlabs/clubs-backend
      REPO_SUBDIR: backend
    docker:
      - image: circleci/buildpack-deps:buster
  frontend:
    environment:
      IMAGE_NAME: pennlabs/clubs-frontend
      REPO_SUBDIR: frontend
    docker:
      - image: circleci/buildpack-deps:buster
jobs:
  test:
    working_directory: ~/pennlabs
    docker:
      - image: circleci/python:3.7
        environment:
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: mysql://root:password@127.0.0.1:3306/circle_test
      - image: circleci/mysql:latest
        command: --default-authentication-plugin=mysql_native_password
        environment:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: circle_test
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          key: deps9-{{ .Branch }}-{{ checksum "backend/Pipfile.lock" }}
      - run:
          name: Install dependencies
          command: |
            cd backend
            sudo pip install pipenv
            pipenv install -d
      - save_cache:
          key: deps9-{{ .Branch }}-{{ checksum "backend/Pipfile.lock" }}
          paths:
            - "backend/.venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"
      - run:
          name: Lint
          command: |
            cd backend
            pipenv run flake8 .
      - run:
          name: Run tests & coverage
          command: |
            cd backend
            pipenv run coverage run manage.py test --settings=pennclubs.settings.ci
            pipenv run coveralls
      - store_test_results:
          path: backend/test-results
      - store_artifacts:
          path: backend/test-results
          destination: trl
  build-backend:
    executor: backend
    <<: *docker-build
  publish-backend:
    executor: backend
    <<: *docker-publish
  build-frontend:
    executor: frontend
    <<: *docker-build
  publish-frontend:
    executor: frontend
    <<: *docker-publish
  deploy:
    working_directory: ~/pennlabs
    docker:
      - image: pennlabs/labs-helm
    steps:
      - checkout
      - run:
          name: Deploy to k8s
          command: /deploy.sh
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - test
      - build-backend:
          requires:
            - test
          <<: *branch-filters
      - publish-backend:
          requires:
            - build-backend
          context: docker-publish
          <<: *branch-filters
      - build-frontend:
          requires:
            - test
          <<: *branch-filters
      - publish-frontend:
          requires:
            - build-frontend
          context: docker-publish
          <<: *branch-filters
      - deploy:
          requires:
            - publish-backend
            - publish-frontend
          context: k8s-deploy
          <<: *branch-filters
