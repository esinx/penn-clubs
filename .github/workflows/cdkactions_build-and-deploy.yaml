# Generated by cdkactions. Do not modify
# Generated as part of the 'application' stack.
# Manually modified by ezwang on 1/25/2021 while cdk is still under development
# Ensure build works before switching back to autogen
name: Build and Deploy
on: push
jobs:
  django-check:
    name: Django Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: v0-${{ hashFiles('backend/Pipfile.lock') }}
      - name: Install Dependencies
        run: |-
          cd backend
          pip install pipenv
          pipenv install --deploy --dev
      - name: Lint (flake8)
        run: |-
          cd backend
          pipenv run flake8 .
      - name: Lint (black)
        run: |-
          cd backend
          pipenv run black --check .
      - name: Test
        run: |-
          cd backend
          pipenv run coverage run manage.py test --settings=pennclubs.settings.ci --parallel
      - name: Upload Code Coverage
        run: |-
          ROOT=$(pwd)
          cd backend
          pipenv run codecov --root ROOT --flags backend
    container:
      image: "python:3.8"
    env:
      DATABASE_URL: "postgres://postgres:postgres@postgres:5432/postgres"
    services:
      postgres:
        image: "postgres:12"
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: "--health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5"
  publish-backend:
    name: Build backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: backend
          file: backend/Dockerfile
          push: false
          tags: "pennlabs/penn-clubs-backend:latest,pennlabs/penn-clubs-backend:${{ github.sha }}"
          cache-from: "type=registry,ref=pennlabs/penn-clubs-backend:latest"
          outputs: type=oci,dest=/tmp/image.tar
      - uses: actions/upload-artifact@v2
        with:
          name: backend-container
          path: /tmp/image.tar
    needs: django-check
  react-check:
    name: React Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: v0-${{ hashFiles('frontend/yarn.lock') }}
      - name: Install Dependencies
        run: |-
          cd frontend
          yarn install --frozen-lockfile
      - name: Test
        run: |-
          cd frontend
          yarn test
      - name: Upload Code Coverage
        run: |-
          ROOT=$(pwd)
          cd frontend
          yarn run codecov -p $ROOT -F frontend
    container:
      image: "node:14"
  publish-frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: frontend
          file: frontend/Dockerfile
          tags: "pennlabs/penn-clubs-frontend:latest,pennlabs/penn-clubs-frontend:${{ github.sha }}"
          cache-from: "type=registry,ref=pennlabs/penn-clubs-frontend:latest"
          outputs: type=oci,dest=/tmp/image.tar
      - uses: actions/upload-artifact@v2
        with:
          name: frontend-container
          path: /tmp/image.tar
    needs: react-check
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            backend-container
            frontend-container
      - name: Load docker images
        run: |-
          ID=$(docker load --input backend-container/image.tar)
          echo "Pre-retag"
          docker images
          docker tag ${ID##Loaded image ID: } pennlabs/penn-clubs-backend:latest
          docker tag ${ID##Loaded image ID: } pennlabs/penn-clubs-backend:${{ github.sha }}
          echo "post-retag"
          docker images
          echo "done"
          ID=$(docker load --input frontend-container/image.tar)
          docker tag ${ID##Loaded image ID: } pennlabs/penn-clubs-frontend:latest
          docker tag ${ID##Loaded image ID: } pennlabs/penn-clubs-frontend:${{ github.sha }}
          docker images
          mkdir -p /tmp/test-results
      - name: Run docker compose
        run: docker-compose -f docker-compose.test.yaml up -d
      - name: Run integration tests
        run: |-
          for try in {1..10}; do
            docker-compose -f docker-compose.test.yaml exec -T backend python manage.py migrate --check && break
            sleep 5
          done
          docker-compose -f docker-compose.test.yaml exec -T backend python manage.py populate
          docker-compose -f docker-compose.test.yaml exec -T frontend yarn integration
      - name: Print server logs
        if: failure()
        run: |-
          docker-compose -f docker-compose.test.yaml logs
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-output
          path: /tmp/test-results
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Publish images
        if: github.ref == 'refs/heads/master'
        run: |-
          docker push pennlabs/penn-clubs-backend:latest
          docker push pennlabs/penn-clubs-frontend:latest
          docker push pennlabs/penn-clubs-backend:${{ github.sha }}
          docker push pennlabs/penn-clubs-frontend:${{ github.sha }}
    env:
      GIT_SHA: ${{ github.sha }}
    needs:
      - publish-backend
      - publish-frontend
  publish-images:
    name: Publish Images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            backend-container
            frontend-container
      - name: Load docker images
        run: |-
          ID=$(docker load --input backend-container/image.tar)
          docker tag ${ID##Loaded image ID: } pennlabs/penn-clubs-backend:latest
          docker tag ${ID##Loaded image ID: } pennlabs/penn-clubs-backend:${{ github.sha }}
          ID=$(docker load --input frontend-container/image.tar)
          docker tag ${ID##Loaded image ID: } pennlabs/penn-clubs-frontend:latest
          docker tag ${ID##Loaded image ID: } pennlabs/penn-clubs-frontend:${{ github.sha }}
          docker images
          mkdir -p /tmp/test-results
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Publish images
        if: github.ref == 'refs/heads/master'
        run: |-
          docker push pennlabs/penn-clubs-backend:latest
          docker push pennlabs/penn-clubs-frontend:latest
          docker push pennlabs/penn-clubs-backend:${{ github.sha }}
          docker push pennlabs/penn-clubs-frontend:${{ github.sha }}
    env:
      GIT_SHA: ${{ github.sha }}
    needs:
      - integration-tests
  deploy:
    runs-on: ubuntu-latest
    container:
      image: "pennlabs/helm-tools:c964e53d3e3e88d36677e84f5437da40a289c7a4"
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |-
          curl -s -X GET -H "Content-Type: application/json" -H "Authorization: Bearer $DO_AUTH_TOKEN" "https://api.digitalocean.com/v2/kubernetes/clusters/${K8S_CLUSTER_ID}/kubeconfig" > /kubeconfig.conf

          export KUBECONFIG=/kubeconfig.conf

          # this specifies what tag of icarus to pull down
          DEPLOY_TAG=$(yq r k8s/values.yaml deploy_version)
          if [ "$DEPLOY_TAG" == "null" ]; then
              echo "Could not find deploy tag"
              exit 1
          fi

          helm repo add pennlabs https://helm.pennlabs.org/

          for i in {1..10}; do
            helm upgrade --install --atomic --set=image_tag=$IMAGE_TAG -f k8s/values.yaml --version "${DEPLOY_TAG}" $RELEASE_NAME pennlabs/icarus && exit 0
            sleep 10s
            echo "Retrying deploy for $i times"
          done
        env:
          IMAGE_TAG: ${{ github.sha }}
          DO_AUTH_TOKEN: ${{ secrets.DO_AUTH_TOKEN }}
          K8S_CLUSTER_ID: ${{ secrets.K8S_CLUSTER_ID }}
    needs:
      - publish-images
